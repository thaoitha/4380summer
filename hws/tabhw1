{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from tabulate import tabulate\n",
        "from IPython.core.display import display, HTML"
      ],
      "metadata": {
        "id": "NH_FaPWZtPOJ"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ds = [['Dataset', 'First Row Col Names?', 'Comma Separated?', 'Row #', 'Col #', 'Size'],\n",
        "       ['Bank Account Closing', 'Yes', 'Yes', 165035, 14, '12MB'],\n",
        "       ['Metastatic Cancer Diagnosis', 'Yes', 'Yes', 12906, 83, '11MB'],\n",
        "       ['Diabetes Prediction', 'Yes', 'Yes', 601, 10, '21K'],\n",
        "       ['Higgs Boson', 'Yes', 'Yes', 250001, 33, '53MB'],\n",
        "       ['Marketing Response', 'Yes', 'Yes', 145232, 1936, '922MB'],\n",
        "       ['Amex Default Prediction', 'Yes', 'Yes', 458913, 190, '16GB'],\n",
        "       ['Santander Customer Satisfaction', 'Yes', 'Yes', 76021, 371, '57MB'],\n",
        "       ['Santander Product Recommendation', 'Yes', 'Yes', 11081212, 48, '1.8GB'],\n",
        "       ['Predict Student Performance from Game Play', 'Yes', 'Yes', 26296946, 20, '4.7GB'],\n",
        "       ['Horse Health', 'Yes', 'Yes', 1235, 29, '229kB'],\n",
        "       ['Software Defects', 'Yes', 'Yes', 101763, 23, '11MB'],\n",
        "       ['Cirrihosis Outcomes', 'Yes', 'Yes', 7905, 20, '733.5kB'],\n",
        "       ['Mushroom Classification', 'Yes', 'Yes', 1000, 23, '374kB']]"
      ],
      "metadata": {
        "id": "DVjqbjamtQr8"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "table = tabulate(ds, headers='firstrow', tablefmt='html')\n",
        "\n",
        "#this is for centering the values to mak easier to read\n",
        "centerval = \"\"\"\n",
        "<style>\n",
        "    table {\n",
        "        width: 100%;\n",
        "        border-collapse: collapse;\n",
        "        font-family: 'Arial', sans-serif;\n",
        "    }\n",
        "    th, td {\n",
        "        border: 1px solid #ddd;\n",
        "        padding: 8px;\n",
        "        text-align: center;\n",
        "    }\n",
        "    th {\n",
        "        background-color: #f2f2f2;\n",
        "        font-family: 'Courier New', monospace;\n",
        "    }\n",
        "</style>\n",
        "\"\"\"\n",
        "\n",
        "# Display the styled HTML table\n",
        "display(HTML(centerval + table))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "hCAMN2cDvpyW",
        "outputId": "9b3163e1-db6a-447b-a51d-ee5de567b744"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "    table {\n",
              "        width: 100%;\n",
              "        border-collapse: collapse;\n",
              "        font-family: 'Arial', sans-serif;\n",
              "    }\n",
              "    th, td {\n",
              "        border: 1px solid #ddd;\n",
              "        padding: 8px;\n",
              "        text-align: center;\n",
              "    }\n",
              "    th {\n",
              "        background-color: #f2f2f2;\n",
              "        font-family: 'Courier New', monospace;\n",
              "    }\n",
              "</style>\n",
              "<table>\n",
              "<thead>\n",
              "<tr><th>Dataset                                   </th><th>First Row Col Names?  </th><th>Comma Separated?  </th><th style=\"text-align: right;\">   Row #</th><th style=\"text-align: right;\">  Col #</th><th>Size   </th></tr>\n",
              "</thead>\n",
              "<tbody>\n",
              "<tr><td>Bank Account Closing                      </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">  165035</td><td style=\"text-align: right;\">     14</td><td>12MB   </td></tr>\n",
              "<tr><td>Metastatic Cancer Diagnosis               </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">   12906</td><td style=\"text-align: right;\">     83</td><td>11MB   </td></tr>\n",
              "<tr><td>Diabetes Prediction                       </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">     601</td><td style=\"text-align: right;\">     10</td><td>21K    </td></tr>\n",
              "<tr><td>Higgs Boson                               </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">  250001</td><td style=\"text-align: right;\">     33</td><td>53MB   </td></tr>\n",
              "<tr><td>Marketing Response                        </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">  145232</td><td style=\"text-align: right;\">   1936</td><td>922MB  </td></tr>\n",
              "<tr><td>Amex Default Prediction                   </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">  458913</td><td style=\"text-align: right;\">    190</td><td>16GB   </td></tr>\n",
              "<tr><td>Santander Customer Satisfaction           </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">   76021</td><td style=\"text-align: right;\">    371</td><td>57MB   </td></tr>\n",
              "<tr><td>Santander Product Recommendation          </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">11081212</td><td style=\"text-align: right;\">     48</td><td>1.8GB  </td></tr>\n",
              "<tr><td>Predict Student Performance from Game Play</td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">26296946</td><td style=\"text-align: right;\">     20</td><td>4.7GB  </td></tr>\n",
              "<tr><td>Horse Health                              </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">    1235</td><td style=\"text-align: right;\">     29</td><td>229kB  </td></tr>\n",
              "<tr><td>Software Defects                          </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">  101763</td><td style=\"text-align: right;\">     23</td><td>11MB   </td></tr>\n",
              "<tr><td>Cirrihosis Outcomes                       </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">    7905</td><td style=\"text-align: right;\">     20</td><td>733.5kB</td></tr>\n",
              "<tr><td>Mushroom Classification                   </td><td>Yes                   </td><td>Yes               </td><td style=\"text-align: right;\">    1000</td><td style=\"text-align: right;\">     23</td><td>374kB  </td></tr>\n",
              "</tbody>\n",
              "</table>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qabun0o2JRat",
        "outputId": "80aa4df0-6fb3-46a2-e20a-f025dfa2a108"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.6.14)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.16.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2024.6.2)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.31.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.66.4)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.0.7)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.1.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.7)\n"
          ]
        }
      ],
      "source": [
        "pip install kaggle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "22tco8shK9RU"
      },
      "outputs": [],
      "source": [
        "!mkdir -p ~/.kaggle\n",
        "!mv kaggle.json ~/.kaggle/\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "Q-idKH0fL7tb"
      },
      "outputs": [],
      "source": [
        "!chmod 600 ~/.kaggle/kaggle.json\n",
        "#set permissions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BMRYMfSJMDWr",
        "outputId": "859cd346-0f17-4100-f2d1-eceb44d49b96"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "santander-product-recommendation.zip: Skipping, found more recently modified local copy (use --force to force download)\n",
            "Archive:  santander-product-recommendation.zip\n",
            "replace sample_submission.csv.zip? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ]
        }
      ],
      "source": [
        "!kaggle competitions download -c santander-product-recommendation\n",
        "!unzip santander-product-recommendation.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sB3MLSUGOsIf",
        "outputId": "fb1933e7-6fb5-49bd-b182-b90daa23550f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading playground-series-s4e1.zip to /content\n",
            "\r  0% 0.00/6.81M [00:00<?, ?B/s]\r 73% 5.00M/6.81M [00:00<00:00, 19.3MB/s]\n",
            "\r100% 6.81M/6.81M [00:00<00:00, 25.7MB/s]\n",
            "Archive:  playground-series-s4e1.zip\n",
            "  inflating: playground-series-s4e1/sample_submission.csv  \n",
            "  inflating: playground-series-s4e1/test.csv  \n",
            "  inflating: playground-series-s4e1/train.csv  \n"
          ]
        }
      ],
      "source": [
        "!kaggle competitions download -c playground-series-s4e1\n",
        "!unzip playground-series-s4e1.zip -d playground-series-s4e1\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wIpdNU7cQddF",
        "outputId": "602c9c1a-43d9-4aa5-a77c-d45bd663ef3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading widsdatathon2024-challenge1.zip to /content\n",
            "\r  0% 0.00/5.04M [00:00<?, ?B/s]\r 99% 5.00M/5.04M [00:00<00:00, 51.2MB/s]\n",
            "\r100% 5.04M/5.04M [00:00<00:00, 51.2MB/s]\n",
            "Archive:  widsdatathon2024-challenge1.zip\n",
            "  inflating: widsdatathon2024-challenge1/sample_submission.csv  \n",
            "  inflating: widsdatathon2024-challenge1/test.csv  \n",
            "  inflating: widsdatathon2024-challenge1/training.csv  \n"
          ]
        }
      ],
      "source": [
        "!kaggle competitions download -c widsdatathon2024-challenge1\n",
        "!unzip widsdatathon2024-challenge1.zip -d widsdatathon2024-challenge1\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c higgs-boson\n",
        "!unzip higgs-boson.zip -d higgs-boson"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vGciu76WkJqn",
        "outputId": "f1561407-51ea-4dd6-8c94-9f28698c6aef"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading higgs-boson.zip to /content\n",
            " 94% 51.0M/54.3M [00:00<00:00, 123MB/s] \n",
            "100% 54.3M/54.3M [00:00<00:00, 104MB/s]\n",
            "Archive:  higgs-boson.zip\n",
            "  inflating: higgs-boson/HiggsBosonCompetition_AMSMetric_rev1.py  \n",
            "  inflating: higgs-boson/random_submission.zip  \n",
            "  inflating: higgs-boson/test.zip    \n",
            "  inflating: higgs-boson/training.zip  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c springleaf-marketing-response\n",
        "!unzip springleaf-marketing-response.zip -d springleaf-marketing-response"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AOJPlOzBkNAj",
        "outputId": "a16dbc47-d35b-43b4-8ab7-b7852cfbe5b8"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading springleaf-marketing-response.zip to /content\n",
            " 96% 288M/300M [00:03<00:00, 118MB/s]\n",
            "100% 300M/300M [00:03<00:00, 84.7MB/s]\n",
            "Archive:  springleaf-marketing-response.zip\n",
            "  inflating: springleaf-marketing-response/sample_submission.csv.zip  \n",
            "  inflating: springleaf-marketing-response/test.csv.zip  \n",
            "  inflating: springleaf-marketing-response/train.csv.zip  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c amex-default-prediction\n",
        "!unzip amex-default-prediction.zip -d amex-default-prediction"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gCYPrErzkQo8",
        "outputId": "27e98b2b-c198-4d0f-83dd-d081f8b0233c"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading amex-default-prediction.zip to /content\n",
            "100% 20.5G/20.5G [03:32<00:00, 152MB/s]\n",
            "100% 20.5G/20.5G [03:32<00:00, 103MB/s]\n",
            "Archive:  amex-default-prediction.zip\n",
            "  inflating: amex-default-prediction/sample_submission.csv  \n",
            "  inflating: amex-default-prediction/test_data.csv  \n",
            "  inflating: amex-default-prediction/train_data.csv  \n",
            "  inflating: amex-default-prediction/train_labels.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c santander-customer-satisfaction\n",
        "!unzip santander-customer-satisfaction.zip -d santander-customer-satisfaction"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2JFhDQR4kTve",
        "outputId": "7c45605b-412e-4f49-b663-012ab9dd09ed"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading santander-customer-satisfaction.zip to /content\n",
            "\r  0% 0.00/8.25M [00:00<?, ?B/s]\r 61% 5.00M/8.25M [00:00<00:00, 27.6MB/s]\n",
            "\r100% 8.25M/8.25M [00:00<00:00, 42.9MB/s]\n",
            "Archive:  santander-customer-satisfaction.zip\n",
            "  inflating: santander-customer-satisfaction/sample_submission.csv  \n",
            "  inflating: santander-customer-satisfaction/test.csv  \n",
            "  inflating: santander-customer-satisfaction/train.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c predict-student-performance-from-game-play\n",
        "!unzip predict-student-performance-from-game-play.zip -d predict-student-performance-from-game-play"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "If2WS7RRkWi7",
        "outputId": "a4d111f6-2725-447b-c118-4c7825758a8c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading predict-student-performance-from-game-play.zip to /content\n",
            "100% 963M/968M [00:11<00:00, 128MB/s]\n",
            "100% 968M/968M [00:11<00:00, 90.7MB/s]\n",
            "Archive:  predict-student-performance-from-game-play.zip\n",
            "  inflating: predict-student-performance-from-game-play/jo_wilder/__init__.py  \n",
            "  inflating: predict-student-performance-from-game-play/jo_wilder/competition.cpython-37m-x86_64-linux-gnu.so  \n",
            "  inflating: predict-student-performance-from-game-play/jo_wilder_310/__init__.py  \n",
            "  inflating: predict-student-performance-from-game-play/jo_wilder_310/competition.cpython-310-x86_64-linux-gnu.so  \n",
            "  inflating: predict-student-performance-from-game-play/sample_submission.csv  \n",
            "  inflating: predict-student-performance-from-game-play/test.csv  \n",
            "  inflating: predict-student-performance-from-game-play/train.csv  \n",
            "  inflating: predict-student-performance-from-game-play/train_labels.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c playground-series-s3e22\n",
        "!unzip playground-series-s3e22.zip -d playground-series-s3e22"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yom2uoqtkZ0j",
        "outputId": "2078f98e-0bc5-4a5c-bb76-15944b632082"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "403 - Forbidden - You must accept this competition's rules before you'll be able to download files.\n",
            "unzip:  cannot find or open playground-series-s3e22.zip, playground-series-s3e22.zip.zip or playground-series-s3e22.zip.ZIP.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c playground-series-s3e23\n",
        "!unzip playground-series-s3e23.zip -d playground-series-s3e23"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N6EcNaINkgKZ",
        "outputId": "922c3cb6-8fcf-4b40-a1c4-0e97b0e5910e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "403 - Forbidden - You must accept this competition's rules before you'll be able to download files.\n",
            "unzip:  cannot find or open playground-series-s3e23.zip, playground-series-s3e23.zip.zip or playground-series-s3e23.zip.ZIP.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "!kaggle competitions download -c playground-series-s3e26\n",
        "!unzip playground-series-s3e26.zip -d playground-series-s3e26\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zZTUXYnckjIw",
        "outputId": "1713e40c-201d-4f6f-ce23-be8167cbda89"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading playground-series-s3e26.zip to /content\n",
            "\r  0% 0.00/350k [00:00<?, ?B/s]\n",
            "\r100% 350k/350k [00:00<00:00, 120MB/s]\n",
            "Archive:  playground-series-s3e26.zip\n",
            "  inflating: playground-series-s3e26/sample_submission.csv  \n",
            "  inflating: playground-series-s3e26/test.csv  \n",
            "  inflating: playground-series-s3e26/train.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "!kaggle datasets download -d uciml/mushroom-classification\n",
        "!unzip mushroom-classification.zip -d mushroom-classification"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w1Br7uOPkk-R",
        "outputId": "4190a23f-de03-464f-c041-732a79f21a70"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/uciml/mushroom-classification\n",
            "License(s): CC0-1.0\n",
            "mushroom-classification.zip: Skipping, found more recently modified local copy (use --force to force download)\n",
            "Archive:  mushroom-classification.zip\n",
            "replace mushroom-classification/mushrooms.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0TVQtIb4Rg-z"
      },
      "outputs": [],
      "source": [
        "#diabetes must manually download, along with..."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w5yiBf7-Bkf6",
        "outputId": "c5883591-5859-40fe-bbd1-70dba7edbb0b"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \u001b[0m\u001b[01;34mamex-default-prediction\u001b[0m/        playground-series-s4e1.zip\n",
            " amex-default-prediction.zip     \u001b[01;34mpredict-student-performance-from-game-play\u001b[0m/\n",
            "'cancer patient data sets.csv'   predict-student-performance-from-game-play.zip\n",
            " cars_24_combined.csv            \u001b[01;34msample_data\u001b[0m/\n",
            "'Diabetes Prediction.zip'        sample_submission.csv.zip\n",
            " gp_sample_submission.csv        \u001b[01;34msantander-customer-satisfaction\u001b[0m/\n",
            " gp_test.csv                     santander-customer-satisfaction.zip\n",
            " gp_train_labels.csv.zip         santander-product-recommendation.zip\n",
            " \u001b[01;34mhiggs-boson\u001b[0m/                    \u001b[01;34mspringleaf-marketing-response\u001b[0m/\n",
            " higgs-boson.zip                 springleaf-marketing-response.zip\n",
            " \u001b[01;34mmushroom-classification\u001b[0m/        test_ver2.csv.zip\n",
            " mushroomclassification.ipynb    train.csv.zip\n",
            " mushroom-classification.zip     train_ver2.csv.zip\n",
            " \u001b[01;34mplayground-series-s3e26\u001b[0m/        \u001b[01;34mwidsdatathon2024-challenge1\u001b[0m/\n",
            " playground-series-s3e26.zip     widsdatathon2024-challenge1.zip\n",
            " \u001b[01;34mplayground-series-s4e1\u001b[0m/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip 'Diabetes Prediction.zip' -d 'Diabetes_Prediction'\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YltKKe-A-hL5",
        "outputId": "56f5f7d5-f540-4f4a-d181-a813997a9d14"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  Diabetes Prediction.zip\n",
            "  inflating: Diabetes_Prediction/sample_submission.csv  \n",
            "  inflating: Diabetes_Prediction/test.csv  \n",
            "  inflating: Diabetes_Prediction/train.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls Diabetes_Prediction\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xCVM-dU7BymO",
        "outputId": "fbd6f3b5-2a37-4cf8-c0df-d20803bf65f0"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sample_submission.csv  test.csv  train.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "file_path = 'Diabetes_Prediction/sample_submission.csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "total_rows = len(df)\n",
        "part_size = total_rows // 3\n",
        "\n",
        "df_part1 = df.iloc[:part_size]\n",
        "df_part2 = df.iloc[part_size:2*part_size]\n",
        "df_part3 = df.iloc[2*part_size:]\n",
        "\n",
        "df_part1.to_csv('dp1.csv', index=False)\n",
        "df_part2.to_csv('dp2.csv', index=False)\n",
        "df_part3.to_csv('dp3.csv', index=False)\n",
        "\n",
        "print(f\"Total rows: {total_rows}\")\n",
        "print(f\"Part 1 rows: {len(df_part1)}\")\n",
        "print(f\"Part 2 rows: {len(df_part2)}\")\n",
        "print(f\"Part 3 rows: {len(df_part3)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AjPB9v36CPG3",
        "outputId": "fe1e7781-c1d8-4eed-d0de-21378f40be9c"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total rows: 168\n",
            "Part 1 rows: 56\n",
            "Part 2 rows: 56\n",
            "Part 3 rows: 56\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "oNVEPdmqOzgD"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
